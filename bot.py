bot.py

import os from telegram import Update, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton from telegram.ext import (ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters, CallbackQueryHandler)

BOT_TOKEN = os.getenv("BOT_TOKEN") CHANNEL_ID = "@HACKERA17X" GROUP_ID = "-1002129604900"  # Replace with your actual group ID (as integer)

user_data = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE): user = update.effective_user keyboard = [ [ InlineKeyboardButton("Main Channel", url="https://t.me/HACKERA17X"), InlineKeyboardButton("Our Group", url="https://t.me/+FVclssxu2fFlOGU9") ], [InlineKeyboardButton("Done ‚úÖ", callback_data="check_joined")] ] await update.message.reply_text( f"‡¶Ü‡¶∏‡¶∏‡¶æ‡¶≤‡¶æ‡¶Æ‡ßÅ ‡¶Ü‡¶≤‡¶æ‡¶á‡¶ï‡ßÅ‡¶Æ {user.first_name},\n" f"‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶è‡¶á ‡¶¨‡¶ü‡ßá ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ ü•∞\n" f"‡¶¨‡¶ü‡¶ü‡¶ø ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶ï‡¶∞‡¶§‡ßá ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶ì ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá ‡¶ú‡ßü‡ßá‡¶® ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶§‡¶æ‡¶∞‡¶™‡¶∞ Done ‚úÖ ‡¶¨‡¶æ‡¶ü‡¶®‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®‡•§", reply_markup=InlineKeyboardMarkup(keyboard) )

async def check_joined(update: Update, context: ContextTypes.DEFAULT_TYPE): user_id = update.effective_user.id bot = context.bot

try:
    channel_status = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
    group_status = await bot.get_chat_member(chat_id=GROUP_ID, user_id=user_id)

    if channel_status.status not in ["left"] and group_status.status not in ["left"]:
        user_data[user_id] = {
            "numbers": [], "copied": 0
        }
        await update.callback_query.message.reply_text("Enter your Numbers\n‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶ó‡ßÅ‡¶≤‡ßã ‡¶™‡ßç‡¶∞‡¶¨‡ßá‡¶∂ ‡¶ï‡¶∞‡¶æ‡¶®")
    else:
        await update.callback_query.message.reply_text("‡¶¶‡ßü‡¶æ ‡¶ï‡¶∞‡ßá ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶è‡¶¨‡¶Ç ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá ‡¶ú‡ßü‡ßá‡¶® ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶Ü‡¶ó‡ßá‡•§")
except Exception as e:
    await update.callback_query.message.reply_text("‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§ ‡¶¶‡ßü‡¶æ ‡¶ï‡¶∞‡ßá ‡¶™‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")

async def handle_numbers(update: Update, context: ContextTypes.DEFAULT_TYPE): user_id = update.effective_user.id text = update.message.text numbers = [line.strip() for line in text.splitlines() if line.strip()]

if user_id not in user_data:
    await update.message.reply_text("‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá /start ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶¶‡¶ø‡¶®‡•§")
    return

user_data[user_id]["numbers"] = numbers
user_data[user_id]["copied"] = 0

await update.message.reply_text(
    f"‚úÖ ‡¶Æ‡ßã‡¶ü ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞: {len(numbers)}\n‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶¨‡¶æ‡¶ü‡¶®‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶§‡ßá‡•§",
    reply_markup=InlineKeyboardMarkup(
        [[InlineKeyboardButton("Get Start", callback_data="get_start")]]
    )
)

async def get_start(update: Update, context: ContextTypes.DEFAULT_TYPE): user_id = update.effective_user.id if user_id not in user_data or not user_data[user_id]["numbers"]: await update.callback_query.message.reply_text("‡¶¶‡ßü‡¶æ ‡¶ï‡¶∞‡ßá ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶¶‡¶ø‡¶® ‡¶Ü‡¶ó‡ßá‡•§") return

await update.callback_query.message.reply_text(
    f"üëá ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶¨‡¶æ‡¶ü‡¶®‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶ï‡¶∞‡ßá ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶ï‡¶™‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®:",
    reply_markup=InlineKeyboardMarkup(
        [[InlineKeyboardButton("COPPY", callback_data="copy_one")]]
    )
)

async def copy_one(update: Update, context: ContextTypes.DEFAULT_TYPE): user_id = update.effective_user.id data = user_data.get(user_id)

if not data or not data["numbers"]:
    await update.callback_query.message.reply_text("‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶®‡ßá‡¶á! ‡¶¶‡ßü‡¶æ ‡¶ï‡¶∞‡ßá ‡¶®‡¶§‡ßÅ‡¶® ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶¶‡¶ø‡¶®‡•§")
    return

copied = data["copied"]
if copied >= len(data["numbers"]):
    await update.callback_query.message.reply_text("‚úÖ ‡¶∏‡¶¨ ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶∂‡ßá‡¶∑!")
    return

number = data["numbers"][copied]
data["copied"] += 1
await update.callback_query.message.reply_text(
    f"üìû {number}\n‚úÖ ‡¶ï‡¶™‡¶ø ‡¶π‡ßü‡ßá‡¶õ‡ßá: {data['copied']} ‡¶ü‡¶ø\n‚è≥ ‡¶¨‡¶æ‡¶ï‡¶ø: {len(data['numbers']) - data['copied']} ‡¶ü‡¶ø"
)

async def delete_numbers(update: Update, context: ContextTypes.DEFAULT_TYPE): user_id = update.effective_user.id user_data[user_id] = {"numbers": [], "copied": 0} await update.message.reply_text("‚ùå ‡¶∏‡¶¨ ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§ ‡¶è‡¶ñ‡¶® ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶®‡¶§‡ßÅ‡¶® ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶¶‡¶ø‡¶®‡•§")

if name == 'main': app = ApplicationBuilder().token(BOT_TOKEN).build() app.add_handler(CommandHandler("start", start)) app.add_handler(CommandHandler("delete", delete_numbers)) app.add_handler(CallbackQueryHandler(check_joined, pattern="check_joined")) app.add_handler(CallbackQueryHandler(get_start, pattern="get_start")) app.add_handler(CallbackQueryHandler(copy_one, pattern="copy_one")) app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_numbers)) app.run_polling()


