import os
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)

TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = "-1002188107100"
GROUP_ID = "-1002213974388"

user_data = {}

WELCOME_TEXT = (
    "‡¶Ü‡¶∏‡¶∏‡¶æ‡¶≤‡¶æ‡¶Æ‡ßÅ ‡¶Ü‡¶≤‡¶æ‡¶á‡¶ï‡ßÅ‡¶Æ {name}\n\n"
    "‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶è‡¶á ‡¶¨‡¶ü‡ßá ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ ü•∞\n"
    "‡¶¨‡¶ü‡¶ü‡¶ø ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶ï‡¶∞‡¶§‡ßá ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶è‡¶¨‡¶Ç ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá ‡¶ú‡¶Ø‡¶º‡ßá‡¶® ‡¶π‡ßã‡¶® ‡¶§‡¶æ‡¶∞‡¶™‡¶∞ 'Done ‚úÖ' ‡¶¨‡¶æ‡¶ü‡¶®‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®‡•§"
)

START_BUTTONS = [
    [
        InlineKeyboardButton("üì¢ Main Channel", url="https://t.me/HACKERA17X"),
        InlineKeyboardButton("üë• Our Group", url="https://t.me/+FVclssxu2fFlOGU9")
    ],
    [InlineKeyboardButton("‚úÖ Done", callback_data="check_join")]
]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    text = WELCOME_TEXT.format(name=user.mention_html())
    await update.message.reply_html(
        text=text,
        reply_markup=InlineKeyboardMarkup(START_BUTTONS)
    )

async def check_join(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()

    try:
        member_channel = await context.bot.get_chat_member(CHANNEL_ID, user_id)
        member_group = await context.bot.get_chat_member(GROUP_ID, user_id)
    except:
        await query.edit_message_text("‚ö†Ô∏è ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶™‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
        return

    if member_channel.status in ["member", "administrator", "creator"] and \
       member_group.status in ["member", "administrator", "creator"]:
        user_data[user_id] = {"numbers": [], "index": 0}
        await query.edit_message_text(
            "‚úÖ Access Granted!\n\nEnter your Numbers:\n‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶ó‡ßÅ‡¶≤‡ßã ‡¶™‡ßç‡¶∞‡¶¨‡ßá‡¶∂ ‡¶ï‡¶∞‡¶æ‡¶®"
        )
    else:
        await query.edit_message_text(
            "‚ùå ‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶è‡¶¨‡¶Ç ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá ‡¶Ø‡ßã‡¶ó ‡¶¶‡¶ø‡¶® ‡¶è‡¶¨‡¶Ç ‡¶Ü‡¶¨‡¶æ‡¶∞ 'Done ‚úÖ' ‡¶¨‡¶æ‡¶ü‡¶®‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
            reply_markup=InlineKeyboardMarkup(START_BUTTONS)
        )

async def handle_numbers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in user_data:
        await update.message.reply_text("‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá /start ‡¶¶‡¶ø‡¶®‡•§")
        return

    numbers = update.message.text.strip().split("\n")
    numbers = [n.strip() for n in numbers if n.strip()]
    user_data[user_id]["numbers"] = numbers
    user_data[user_id]["index"] = 0

    await update.message.reply_text(
        f"‚úÖ ‡¶Æ‡ßã‡¶ü {len(numbers)} ‡¶ü‡¶ø ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶è‡¶®‡ßç‡¶ü‡¶æ‡¶∞ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§",
        reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton("üöÄ Get Start", callback_data="get_start")]]
        )
    )

async def get_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(
        "üëç ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã! ‡¶è‡¶ñ‡¶® 'COPY' ‡¶¨‡¶æ‡¶ü‡¶®‡ßá ‡¶ö‡¶æ‡¶™ ‡¶¶‡¶ø‡¶®‡•§",
        reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton("üìã COPY", callback_data="copy_number")]]
        )
    )

async def copy_number(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()

    if user_id not in user_data or not user_data[user_id]["numbers"]:
        await query.edit_message_text("‚ùå ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§ ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶¶‡¶ø‡¶®‡•§")
        return

    index = user_data[user_id]["index"]
    numbers = user_data[user_id]["numbers"]

    if index < len(numbers):
        number = numbers[index]
        user_data[user_id]["index"] += 1
        copied = user_data[user_id]["index"]
        total = len(numbers)
        remaining = total - copied

        await query.edit_message_text(
            f"üìã ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞: {number}\n‚úÖ ‡¶ï‡¶™‡¶ø ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá: {copied}/{total} ‡¶ü‡¶ø\n‚è≥ ‡¶¨‡¶æ‡¶ï‡¶ø ‡¶Ü‡¶õ‡ßá: {remaining} ‡¶ü‡¶ø",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("üìã COPY", callback_data="copy_number")]]
            )
        )
    else:
        await query.edit_message_text("‚úÖ ‡¶∏‡¶¨ ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶ï‡¶™‡¶ø ‡¶∂‡ßá‡¶∑ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§")

async def delete(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id in user_data:
        user_data.pop(user_id)
        await update.message.reply_text("üóëÔ∏è ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ü‡¶ó‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶ó‡ßÅ‡¶≤‡ßã ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§\n‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶¶‡¶ø‡¶®:")
    else:
        await update.message.reply_text("‚ùå ‡¶ï‡¶ø‡¶õ‡ßÅ‡¶á ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶Æ‡¶§‡ßã‡•§")

if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(check_join, pattern="check_join"))
    app.add_handler(CallbackQueryHandler(get_start, pattern="get_start"))
    app.add_handler(CallbackQueryHandler(copy_number, pattern="copy_number"))
    app.add_handler(CommandHandler("delete", delete))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_numbers))

    app.run_polling()
